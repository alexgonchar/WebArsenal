@model Nop.Web.Models.Customer.CustomerInfoModel
@using Nop.Web.Framework;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @Html.Partial("MyAccountNavigation", Model.NavigationModel, new ViewDataDictionary())
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function() {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache:false,
                    type: "GET",
                    url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                success: function (data) {
                    ddlStates.html('');
                    $.each(data, function(id, option) {
                        ddlStates.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error:function (xhr, ajaxOptions, thrownError){
                    alert('Failed to retrieve states.');
                    statesProgress.hide();
                }  
            });
        });
        });
    </script>
}
<div class="account-page">
    <div class="row-fluid show-grid">
        <div class="span12">
            <div class="page-title">
                <h1>@T("Account.MyAccount") - @T("Account.CustomerInfo")</h1>
            </div>
        </div>
    </div>

    @using (Html.BeginForm("", "", FormMethod.Post, new { @class = "well form-search form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        <fieldset>
            @Html.Row(@<text>@Html.ValidationSummary(true)</text>, @<div class="message-error">@item
            </div>)
            @this.GroutTitle("Account.YourPersonalDetails")
            @if (Model.GenderEnabled)
            {
                <div class="control-group">
                    @Html.LabelFor(model => model.Gender, new { @class = "control-label" })
                    <div class="controls">
                        <label class="radio" for="Gender_Male">
                            @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                            @T("Account.Fields.Gender.Male")
                        </label> <br/>
                        <label class="radio" for="Gender_Female">
                            @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                            @T("Account.Fields.Gender.Female")
                        </label>
                    </div>
                </div>
            }

            <div class="control-group">
                @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
                <div class="controls">
                    @Html.EditorFor(model => model.FirstName)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.FirstName)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                <div class="controls">
                    @Html.EditorFor(model => model.LastName)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.LastName)
                </div>
            </div>

            @if (Model.DateOfBirthEnabled)
            {
                <div class="control-group">
                    @Html.LabelFor(model => model.DateOfBirthDay, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                Html.FieldNameFor(x => x.DateOfBirthMonth),
                                Html.FieldNameFor(x => x.DateOfBirthYear),
                                DateTime.Now.Year - 110,
                                DateTime.Now.Year,
                                Model.DateOfBirthDay,
                                Model.DateOfBirthMonth,
                                Model.DateOfBirthYear)
                        @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                        @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                        @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                    </div>
                </div>
            }

            <div class="control-group">
                @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                <div class="controls">
                    @Html.EditorFor(model => model.Email)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
            </div>

            @if (Model.UsernamesEnabled)
            {
                if (Model.AllowUsersToChangeUsernames)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.Username, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Username)
                        @Html.ValidationMessageFor(model => model.Username)
                    </div>
                </div>
                    if (Model.CheckUsernameAvailabilityEnabled)
                    {
                <div class="control-group">
                    <div class="controls">
                        @Html.Partial("_CheckUsernameAvailability")
                    </div>
                </div>
                    }
                }
                else
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.Username, new { @class = "control-label" })
                    <div class="controls">
                        @Model.Username
                    </div>
                </div>
                }

            }
            @if (Model.AssociatedExternalAuthRecords.Count > 0)
            {
                <div class="control-group">
                    @Html.LabelFor(model => model.AssociatedExternalAuthRecords, new { @class = "control-label" })
                    <div class="controls">
                        <table class="data-table">
                            <col />
                            <col />
                            <col />
                            <thead>
                                <tr>
                                    <th class="a-center">
                                        @T("Account.AssociatedExternalAuth.AuthMethodName")
                                    </th>
                                    <th class="a-center">
                                        @T("Account.AssociatedExternalAuth.Email")
                                    </th>
                                    <th class="a-center">
                                        @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.AssociatedExternalAuthRecords)
                                {
                                    <tr>
                                        <td class="a-left">
                                            @item.AuthMethodName
                                        </td>
                                        <td class="a-left">
                                            @item.Email
                                        </td>
                                        <td class="a-left">
                                            @item.ExternalIdentifier
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <hr />

            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                @this.GroutTitle("Account.CompanyDetails")

                if (Model.CompanyEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.Company, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Company)
                        @Html.ValidationMessageFor(model => model.Company)
                    </div>
                </div>
                }
                if (Model.DisplayVatNumber)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.VatNumber, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.VatNumber)&nbsp;&nbsp;&nbsp;@Model.VatNumberStatusNote
                    </div>
                </div>
                <div class="control-group">
                    <div class="controls">
                        <i>@T("Account.Fields.VatNumber.Note")</i>
                    </div>
                </div>
                }

                <hr />
            }
            @if (Model.StreetAddressEnabled ||
                       Model.StreetAddress2Enabled ||
                       Model.ZipPostalCodeEnabled ||
                       Model.CityEnabled ||
                       Model.CountryEnabled)
            {
                @this.GroutTitle("Account.YourAddress")
                            
                if (Model.StreetAddressEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.StreetAddress, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.StreetAddress)
                        @Html.ValidationMessageFor(model => model.StreetAddress)
                    </div>
                </div>
                }
                if (Model.StreetAddress2Enabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.StreetAddress2, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.StreetAddress2)
                        @Html.ValidationMessageFor(model => model.StreetAddress2)
                    </div>
                </div>
                }
                if (Model.ZipPostalCodeEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.ZipPostalCode, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.ZipPostalCode)
                        @Html.ValidationMessageFor(model => model.ZipPostalCode)
                    </div>
                </div>
                }
                if (Model.CityEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.City, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.City)
                        @Html.ValidationMessageFor(model => model.City)
                    </div>
                </div>
                }
                if (Model.CountryEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.CountryId, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownList("CountryId", Model.AvailableCountries)
                    </div>
                </div>
                }

                if (Model.CountryEnabled && Model.StateProvinceEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.StateProvinceId, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                        <span id="states-loading-progress" style="display: none;">
                            @T("Common.Wait...")
                            <img src='@Url.Content("~/Content/Images/ajax_loader_small.gif")' alt="@T("Common.Wait...")"/>
                        </span>
                    </div>
                </div>
                }
                <hr />
            }
            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                @this.GroutTitle("Account.YourContactInformation")

                if (Model.PhoneEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.Phone, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Phone)
                        @Html.ValidationMessageFor(model => model.Phone)
                    </div>
                </div>
                }
                if (Model.FaxEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.Fax, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Fax)
                        @Html.ValidationMessageFor(model => model.Fax)
                    </div>
                </div>
                }
                <hr />
            }
            @if (Model.NewsletterEnabled)
            {
                @this.GroutTitle("Account.Options")
                            
                <div class="control-group">
                    <div class="controls">
                        @Html.MyCheckBoxFor(m => m.Newsletter)
                    </div>
                </div>
                            
                <hr />
            }
            @if (Model.AllowCustomersToSetTimeZone || Model.SignatureEnabled)
            {
                @this.GroutTitle("Account.Preferences")
                        
                <div class="control-group">
                    @Html.LabelFor(model => model.TimeZoneId, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                        @Html.ValidationMessageFor(model => model.TimeZoneId)
                    </div>
                </div>
                
                if (Model.SignatureEnabled)
                {
                <div class="control-group">
                    @Html.LabelFor(model => model.Signature, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextAreaFor(model => model.Signature, new { @class = "accountsignaturetext" })
                    </div>
                </div>                         
                }
                
                <hr />
            }
        </fieldset>
            
        <div class="form-actions">
            <button type="submit" id="save-info-button" name="save-info-button" class="btn btn-primary">@T("Common.Save")</button>
        </div>
    }
</div>
