@model Nop.Web.Models.Customer.RegisterModel
@using Nop.Web.Framework;
@using Nop.Web.Framework.UI.Captcha;
@{
    Layout = "~/Views/Shared/_ColumnsThree.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);

    Func<dynamic, object> formGroupTitle = @<text><div class="control-group">
                                                      <div class="controls">
                                                          <h4>@T(@item)</h4>
                                                      </div>
                                                  </div>
                                            </text>;
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function() {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache:false,
                    type: "GET",
                    url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                success: function (data) {
                    ddlStates.html('');
                    $.each(data, function(id, option) {
                        ddlStates.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error:function (xhr, ajaxOptions, thrownError){
                    alert('Failed to retrieve states.');
                    statesProgress.hide();
                }  
            });
        });
        });
    </script>
}
@using (Html.BeginForm("", "", FormMethod.Post, new { @class = "well form-search form-horizontal" }))
{
    @Html.AntiForgeryToken()
    
    <div class="registration-page">
        @Html.Row(@<text><h1>@T("Account.Register")</h1></text>)


        <div class="body">
            @Html.Row(@<text>@Html.ValidationSummary(true)</text>, @<div class="message-error">@item
            </div>)
            @Html.Row(@<text>@Html.Partial("_ExternalAuthentication.AssociateMessage")</text>)

            <div class="row-fluid show-grid">
                <div class="span12">

                    <fieldset>

                        @formGroupTitle("Account.YourPersonalDetails")

                        @if (Model.GenderEnabled)
                        {
                            <div class="control-group">
                                @Html.LabelFor(model => model.Gender, new { @class = "control-label" })
                                <div class="controls">
                                    <label class="radio" for="Gender_Male">
                                        @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                                        @T("Account.Fields.Gender.Male")
                                    </label>
                                    <label class="radio" for="Gender_Female">
                                        @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                                        @T("Account.Fields.Gender.Female")
                                    </label>
                                </div>
                            </div>
                        }
                        <div class="control-group">
                            @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(model => model.FirstName)
                                @Html.RequiredHint()
                                @Html.ValidationMessageFor(model => model.FirstName)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(model => model.LastName)
                                @Html.RequiredHint()
                                @Html.ValidationMessageFor(model => model.LastName)
                            </div>
                        </div>

                        @if (Model.DateOfBirthEnabled)
                        {
                            <div class="control-group">
                                @Html.LabelFor(model => model.DateOfBirthDay, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                Html.FieldNameFor(x => x.DateOfBirthMonth),
                                Html.FieldNameFor(x => x.DateOfBirthYear),
                                DateTime.Now.Year - 110,
                                DateTime.Now.Year,
                                Model.DateOfBirthDay,
                                Model.DateOfBirthMonth,
                                Model.DateOfBirthYear)
                                    @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                                    @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                                    @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                                </div>
                            </div>
                        }

                        <div class="control-group">
                            @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(model => model.Email)
                                @Html.RequiredHint()
                                @Html.ValidationMessageFor(model => model.Email)
                            </div>
                        </div>

                        @if (Model.UsernamesEnabled)
                        {
                            <div class="control-group">
                                @Html.LabelFor(model => model.Username, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.Username)
                                    @Html.RequiredHint()
                                    @Html.ValidationMessageFor(model => model.Username)
                                </div>
                            </div>
                            if (Model.CheckUsernameAvailabilityEnabled)
                            {
                            <div class="control-group">
                                <div class="controls">
                                    @Html.Partial("_CheckUsernameAvailability")
                                </div>
                            </div>
                            }
                        }

                        <hr />

                        @if (Model.CompanyEnabled || Model.DisplayVatNumber)
                        {
                            @formGroupTitle("Account.CompanyDetails")
                            
                            if (Model.CompanyEnabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.Company, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.Company)
                                    @Html.ValidationMessageFor(model => model.Company)
                                </div>
                            </div>
                            }
                            if (Model.DisplayVatNumber)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.VatNumber, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.VatNumber)
                                    @Html.ValidationMessageFor(model => model.VatNumber)
                                </div>
                            </div>
                            <div class="control-group">
                                <i>@T("Account.Fields.VatNumber.Note")</i>
                            </div>
                                
                            }
                            <hr />
                        }
                        @if (Model.StreetAddressEnabled ||
                       Model.StreetAddress2Enabled ||
                       Model.ZipPostalCodeEnabled ||
                       Model.CityEnabled ||
                       Model.CountryEnabled)
                        {
                            @formGroupTitle("Account.YourAddress")
                            
                            if (Model.StreetAddressEnabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.StreetAddress, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.StreetAddress)
                                    @Html.ValidationMessageFor(model => model.StreetAddress)
                                </div>
                            </div>
                            }
                            if (Model.StreetAddress2Enabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.StreetAddress2, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.StreetAddress2)
                                    @Html.ValidationMessageFor(model => model.StreetAddress2)
                                </div>
                            </div>
                            }
                            if (Model.ZipPostalCodeEnabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.ZipPostalCode, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.ZipPostalCode)
                                    @Html.ValidationMessageFor(model => model.ZipPostalCode)
                                </div>
                            </div>
                            }
                            if (Model.CityEnabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.City, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.City)
                                    @Html.ValidationMessageFor(model => model.City)
                                </div>
                            </div>
                            }
                            if (Model.CountryEnabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.CountryId, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.DropDownList("CountryId", Model.AvailableCountries)
                                </div>
                            </div>
                            }

                            if (Model.CountryEnabled && Model.StateProvinceEnabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.StateProvinceId, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                                    <span id="states-loading-progress" style="display: none;">
                                        @T("Common.Wait...")
                                        <img src='@Url.Content("~/Content/Images/ajax_loader_small.gif")' alt="@T("Common.Wait...")"/>
                                    </span>
                                </div>
                            </div>
                            }
                            <hr />
                        }
                        @if (Model.PhoneEnabled || Model.FaxEnabled)
                        {
                            @formGroupTitle("Account.YourContactInformation")

                            if (Model.PhoneEnabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.Phone, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.Phone)
                                    @Html.ValidationMessageFor(model => model.Phone)
                                </div>
                            </div>
                            }
                            if (Model.FaxEnabled)
                            {
                            <div class="control-group">
                                @Html.LabelFor(model => model.Fax, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.Fax)
                                    @Html.ValidationMessageFor(model => model.Fax)
                                </div>
                            </div>
                            }
                            <hr />
                        }
                        @if (Model.NewsletterEnabled)
                        {
                            @formGroupTitle("Account.Options")
                            
                            <div class="control-group">
                                <div class="controls">
                                    @Html.MyCheckBoxFor(m => m.Newsletter)
                                </div>
                            </div>
                            
                            <hr />
                        }
                        @if (Model.AllowCustomersToSetTimeZone)
                        {
                            @formGroupTitle("Account.Preferences")
                        
                            <div class="control-group">
                                @Html.LabelFor(model => model.TimeZoneId, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                                    @Html.ValidationMessageFor(model => model.TimeZoneId)
                                </div>
                            </div>
                            
                            <hr />
                        }
                        
                        @formGroupTitle("Account.YourPassword")

                        <div class="control-group">
                            @Html.LabelFor(model => model.Password, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(model => model.Password)
                                @Html.RequiredHint()
                                @Html.ValidationMessageFor(model => model.Password)
                            </div>
                        </div>

                        <div class="control-group">
                            @Html.LabelFor(model => model.ConfirmPassword, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(model => model.ConfirmPassword)
                                @Html.RequiredHint()
                                @Html.ValidationMessageFor(model => model.ConfirmPassword)
                            </div>
                        </div>

                        @if (Model.DisplayCaptcha)
                        {
                            <div class="control-group">

                                <div class="controls">
                                    @Html.Raw(Html.GenerateCaptcha())
                                </div>
                            </div>
                        }

                        <div class="form-actions">
                            <button id="register-button" name="register-button" type="submit" class="btn btn-primary">@T("Account.Register.Button")</button>
                        </div>
                    </fieldset>
                </div>
                @*span12*@
            </div>
        </div>
        @*body*@
    </div>
}